package com.example.algorizmstudy

//네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.
//
//다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.
//1478 → "one4seveneight"
//234567 → "23four5six7"
//10203 → "1zerotwozero3"
//이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.
//참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.
//숫자	영단어
//0	    zero
//1	    one
//2	    two
//3	    three
//4	    four
//5	    five
//6	    six
//7	    seven
//8	    eight
//9	    nine
//제한사항
//1 ≤ s의 길이 ≤ 50
//s가 "zero" 또는 "0"으로 시작하는 경우는 주어지지 않습니다.
//return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.
//입출력 예
//          s	                result
//  "one4seveneight"	        1478
//  "23four5six7"	            234567
//  "2three45sixseven"  	    234567
//  "123"	                    123
//입출력 예 #2
//문제 예시와 같습니다.
//입출력 예 #3
//"three"는 3, "six"는 6, "seven"은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다.
//입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.
//입출력 예 #4
//s에는 영단어로 바뀐 부분이 없습니다.

//아쉬운점 문자열에 일부분을 바꾼다고 했을때 replace를 생각하지못했다.
fun main() {
    otherSolution("one4seveneight")
    otherSolution("23four5six7")
    otherSolution("2three45sixseven")
    otherSolution("123")
}

fun solution6(s: String): Int {
    val stringArray =
        arrayOf("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine")
    var answer: String = ""
    var string = ""
    for (i in s.indices) {
        if (s[i].isDigit()) {
            answer += s[i]
        } else {
            string += s[i]
            for (j in stringArray.indices) {
                if (string == stringArray[j]) {
                    answer += gubnString(string)
                    string = ""
                }
            }
        }
    }
    return answer.toInt()
}

fun gubnString(num: String): String {
    when (num) {
        "zero" -> {
            return "0"
        }
        "one" -> {
            return "1"
        }
        "two" -> {
            return "2"
        }
        "three" -> {
            return "3"
        }
        "four" -> {
            return "4"
        }
        "five" -> {
            return "5"
        }
        "six" -> {
            return "6"
        }
        "seven" -> {
            return "7"
        }
        "eight" -> {
            return "8"
        }
        "nine" -> {
            return "9"
        }
        else -> {
            return "10"
        }

    }
}
//해석
//map사용해서 0~9꺄지의 영어단어를 키값으로 만들어 놓고 키값에 맞는 값을 설정 해놓는다.
//그러고나서 map에 담은 키값, 값을 for문으로 돌려서 영어 단어는 replace하고 숫자는 그대로 냅두고  담는다
fun otherSolution(s: String): Int {
    var answer = s
    val dict = mapOf(
        "zero" to 0,
        "one" to 1,
        "two" to 2,
        "three" to 3,
        "four" to 4,
        "five" to 5,
        "six" to 6,
        "seven" to 7,
        "eight" to 8,
        "nine" to 9
    )
    for ((k, v) in dict) {
        answer = answer.replace(k, v.toString())
    }
    println("${answer.toInt()}")
    return answer.toInt()
}

